///
/// @Generated by Mockolo
///






public class ControllerAMock: ControllerA {
    public init() { }


    public private(set) var methodCallCount = 0
    public var methodHandler: ((Any) -> (Int))?
    public func method<F: Foo>(foo: F) -> Int {
        methodCallCount += 1
        if let methodHandler = methodHandler {
            return methodHandler(foo)
        }
        return 0
    }
}

public class ControllerBMock: ControllerB {
    public init() { }


    public private(set) var methodCallCount = 0
    public var methodHandler: ((Any) -> (Int))?
    public func method(foo: some Foo) -> Int {
        methodCallCount += 1
        if let methodHandler = methodHandler {
            return methodHandler(foo)
        }
        return 0
    }
}

public class OpaqueReturnTypeProtocolMock: OpaqueReturnTypeProtocol {
    public init() { }


    public private(set) var nonOptionalCallCount = 0
    public var nonOptionalHandler: ((Any) -> (Int))?
    public func nonOptional(_ type: some Error) -> Int {
        nonOptionalCallCount += 1
        if let nonOptionalHandler = nonOptionalHandler {
            return nonOptionalHandler(type)
        }
        return 0
    }

    public private(set) var optionalCallCount = 0
    public var optionalHandler: ((Any?) -> ())?
    public func optional(_ type: (some Error)?)  {
        optionalCallCount += 1
        if let optionalHandler = optionalHandler {
            optionalHandler(type)
        }
        
    }
}

